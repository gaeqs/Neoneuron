#version 460
#extension GL_EXT_mesh_shader: enable

const float M_PI = 3.1415926535897932384626433832795f;
const int POINTS_PER_CIRCLE = 16;
const int GROUPS_SIZE = POINTS_PER_CIRCLE * 2;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout (triangles) out;
layout (max_vertices = GROUPS_SIZE, max_primitives = GROUPS_SIZE) out;

layout (set = 0, binding = 0) uniform Matrices {
    mat4 view;
    mat4 viewProjection;
    mat4 inverseProjection;
    float near;
    float far;
};

struct Section {
    vec4 endAndRadius;
    uint type;
    uint parent;
};

layout(std430, set = 2, binding = 0) buffer Data {
    Section sections[];
};

struct TaskData {
    uint section;
};

taskPayloadSharedEXT TaskData td;

void pushVertex(uint i, vec4 position) {
    gl_MeshVerticesEXT[i].gl_Position = viewProjection * position;
}

void main() {
    Section section = sections[td.section];
    Section parent = sections[section.parent];

    vec3 end = section.endAndRadius.xyz;
    vec3 start = parent.endAndRadius.xyz;

    float endRadius = section.endAndRadius.w;
    float startRadius = parent.endAndRadius.w;



    float angle = gl_LocalInvocationID.x / float(POINTS_PER_CIRCLE) * 2.0f * M_PI;
    float cosA = cos(angle);
    float sinA = sin(angle);

    bool first = gl_LocalInvocationID.x < POINTS_PER_CIRCLE;

    vec3 r = normalize(end - start);
    vec3 p = vec3(-r.y, r.xz);

    vec3 rotated = (1.0f - cosA) * dot(r, p) * r + cosA * r + sinA * cross(r, p);

    vec3 center = first ? start : end;
    vec3 point = center + rotated;


    SetMeshOutputsEXT(GROUPS_SIZE, GROUPS_SIZE);
    pushVertex(gl_LocalInvocationID.x, vec4(point, 1));

    uint a = gl_LocalInvocationID.x;
    uint b = (gl_LocalInvocationID.x + 1) % 16;
    uint c = (gl_LocalInvocationID.x + (first ? 1 : -1)) % 16 + 16;

    gl_PrimitiveTriangleIndicesEXT[0] = uvec3(a, b, c);
}
    