#version 460
#extension GL_EXT_mesh_shader: enable

const float M_PI = 3.1415926535897932384626433832795f;
const int POINTS_PER_CIRCLE = 16;
const int GROUPS_SIZE = POINTS_PER_CIRCLE * 2;

layout (local_size_x = GROUPS_SIZE, local_size_y = 1, local_size_z = 1) in;
layout (triangles) out;
layout (max_vertices = GROUPS_SIZE * 3, max_primitives = GROUPS_SIZE) out;

layout (set = 0, binding = 0) uniform Matrices {
    mat4 view;
    mat4 viewProjection;
    mat4 inverseProjection;
    vec4 planes[6];
    float near;
    float far;
};

struct Section {
    uint neuronId;
    uint sectionId;
    uint type;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

layout(std430, set = 2, binding = 0) buffer Data {
    Section sections[];
};

layout(std430, set = 2, binding = 1) buffer Selection {
    bool selected[];
};

struct TaskData {
    uint section;
};

taskPayloadSharedEXT TaskData td;

layout(location = 0) out vec3 fragNormal[];
layout(location = 1) flat out float fragType[];
layout(location = 2) flat out float fragNeuronId[];
layout(location = 3) flat out float fragSectionId[];
layout(location = 4) flat out float fragSelected[];


void pushVertex(uint i, vec4 position, vec3 normal, uint type, uint neuronId, uint sectionId, bool sel) {
    gl_MeshVerticesEXT[i].gl_Position = viewProjection * position;
    fragNormal[i] = normal;
    fragType[i] = uintBitsToFloat(type);
    fragNeuronId[i] = uintBitsToFloat(neuronId);
    fragSectionId[i] = uintBitsToFloat(sectionId);
    fragSelected[i] = sel ? 1.0f : 0.0f;
}

vec3 rotate (vec3 v, vec3 n, float a) {
    return v * cos(a) + cross(n, v) * sin(a) + n * dot(n, v) * (1. - cos(a));
}

void main() {
    Section section = sections[td.section];
    Section parent = sections[section.parent];
    Section grandParent = sections[parent.parent];

    bool isSelected = selected[td.section];

    vec3 end = section.endAndRadius.xyz;
    vec3 start = parent.endAndRadius.xyz;
    vec3 parentStart = grandParent.endAndRadius.xyz;

    float endRadius = section.endAndRadius.w;
    float startRadius = parent.endAndRadius.w;

    float angle = float(gl_LocalInvocationID.x) / float(POINTS_PER_CIRCLE) * 2.0f * M_PI;
    float cosA = cos(angle);
    float sinA = sin(angle);

    bool first = gl_LocalInvocationID.x < POINTS_PER_CIRCLE;

    vec3 direction = normalize(end - start);
    vec3 parentDirection = normalize(start - parentStart);

    vec3 axis = cross(direction, parentDirection);

    vec3 thisP = cross(direction, vec3(0, 0, 1));
    vec3 parentP = cross(parentDirection, vec3(0, 0, 1));
    parentP *= sign(dot(thisP, parentP));

    vec3 r = first ? parentDirection : direction;
    vec3 p = first ? parentP : thisP;
    float radius = (first ? startRadius : endRadius) * 0.2f;

    vec3 rotated = rotate(p, r, angle);

    vec3 center = first ? start : end;

    SetMeshOutputsEXT(GROUPS_SIZE * 3, GROUPS_SIZE);

    if (gl_WorkGroupID.x == 0) {
        SetMeshOutputsEXT(GROUPS_SIZE, GROUPS_SIZE);

        vec3 point = center + rotated * radius;
        pushVertex(gl_LocalInvocationID.x, vec4(point, 1), rotated, 0, section.neuronId, section.sectionId, isSelected);

        uint a = gl_LocalInvocationID.x;
        uint b = (gl_LocalInvocationID.x + 1) % POINTS_PER_CIRCLE;
        uint c = (gl_LocalInvocationID.x + (first ? 0 : 1)) % POINTS_PER_CIRCLE + POINTS_PER_CIRCLE;
        gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationID.x] = uvec3(a, b, c);
    } else {
        SetMeshOutputsEXT(GROUPS_SIZE * 3, GROUPS_SIZE);

        vec3 point = center + rotated * radius;
        vec3 point2 = point + direction * radius * 0.1f;
        vec3 point3 = point + direction * radius * 0.05f + p * 0.25;
        uint type = gl_LocalInvocationID.x < 16 ? 1 : 2;
        pushVertex(gl_LocalInvocationID.x * 3, vec4(point, 1), rotated, type, section.neuronId, section.sectionId, isSelected);
        pushVertex(gl_LocalInvocationID.x * 3 + 1, vec4(point2, 1), rotated, type, section.neuronId, section.sectionId, isSelected);
        pushVertex(gl_LocalInvocationID.x * 3 + 2, vec4(point3, 1), rotated, type, section.neuronId, section.sectionId, isSelected);
        gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationID.x] = uvec3(0, 1, 2) + uvec3(gl_LocalInvocationID.x * 3);
    }
}
