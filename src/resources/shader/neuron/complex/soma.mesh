#version 460
#extension GL_EXT_mesh_shader: enable
#extension GL_KHR_shader_subgroup_ballot: enable

const float M_PI = 3.1415926535897932384626433832795f;

const uint MAX_SOMA_CONNECTIONS = 8;

const uint MAX_LAT_VERTICES = 64;
const uint MAX_LONG_VERTICES = 64;
const uint MAX_VERTICES = MAX_LAT_VERTICES * MAX_LONG_VERTICES;
const uint STORAGE_PER_SOMA = MAX_VERTICES;

const uint MAX_CONNECTION_VERTICES = 32;
const int MAX_POINTS_PER_CIRCLE = 16;

// Define the maximum vertices and primitives for the mesh shader
const uint GROUP_MAX_VERTICES = MAX_LONG_VERTICES * 2;
const uint GROUP_MAX_PRIMITIVES = MAX_LONG_VERTICES * 2;

layout (local_size_x = min(32, MAX_LONG_VERTICES), local_size_y = 1, local_size_z = 1) in;
layout (triangles) out;
layout(max_vertices = GROUP_MAX_VERTICES, max_primitives = GROUP_MAX_PRIMITIVES) out;

layout (set = 0, binding = 0) uniform Matrices {
    mat4 view;
    mat4 viewProjection;
    mat4 inverseProjection;
    float near;
    float far;
};

layout (set = 0, binding = 1) uniform GlobalData {
    float currentTime;
    float radiusStrength;
    float startClip;
    float endClip;
    float splitHeight;
    float splitArcStrength;
    uint rotationIndexOffset;
    uint childrenRotationIndexOffset;
    uint minChildrenForJoint;
    uint verticesPerCircle;
    uint somaLatitudes;
    uint somaLongitudes;
    float somaConnectionPushFactor;
    float somaWeightPower;
    float somaSphereWeight;
    float somaConnectionMaxWeight;
    vec4 defaultColor;
    vec4 selectedColor;
};

struct Neuron {
    uint neuronId;
    mat4 model;
    mat4 normal;
};

struct Section {
    uint neuronIndex;
    uint sectionId;
    uint metadata;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

struct Soma {
    uint sectionIndex;
    uint amount;
    uint connection[MAX_SOMA_CONNECTIONS];
};

layout(std430, set = 2, binding = 0) buffer Neurons {
    Neuron neurons[];
};

layout(std430, set = 2, binding = 1) buffer Data {
    Section sections[];
};

layout(std430, set = 2, binding = 3) buffer Somas {
    Soma somas[];
};

layout(std430, set = 2, binding = 4) buffer Selection {
    bool selected[];
};

layout(std430, set = 2, binding = 5) buffer SomaGPUData {
    uint packedConnection[];
};

struct TaskData {
    uint somaIndex;
};

taskPayloadSharedEXT TaskData td;

layout(location = 0) out vec3 fragNormal[];
layout(location = 1) out vec3 fragColor[];
layout(location = 2) flat out float fragNeuronId[];
layout(location = 3) flat out float fragSectionId[];
layout(location = 4) flat out float fragSelected[];


shared uint connectionVerticesIndices[MAX_CONNECTION_VERTICES];
shared vec3 connectionVertices[MAX_CONNECTION_VERTICES];
shared float connectionVerticesAngles[MAX_CONNECTION_VERTICES];

vec3 closestPointInSegment(vec3 from, vec3 to, vec3 point) {
    vec3 v = point - from;
    vec3 dir = to - from;
    float l2 = dot(dir, dir);
    float d = clamp(dot(v, dir) / l2, 0.0f, 1.0f);
    return from + d * dir;
}

bool isInsideSphere(vec3 center, float radius, vec3 point) {
    vec3 l = point - center;
    return dot(l, l) <= radius * radius;
}

vec3 projectToSphere(vec3 center, float radius, vec3 point) {
    return center + normalize(point - center) * radius;
}

vec3 projectToPlane(vec3 n, vec3 pointInPlane, vec3 pointToProject) {
    vec3 v = pointToProject - pointInPlane;
    vec3 vn = dot(v, n) * n;
    return pointToProject - vn;
}

vec3 projectToCapsule(vec3 from, vec3 to, float radius, vec3 point) {
    vec3 position = mix(point, to, somaConnectionPushFactor);
    vec3 center = closestPointInSegment(from, to, position);
    return projectToSphere(center, radius, position);
}

uint fetchConnection(uint vertex) {
    uint index = td.somaIndex * STORAGE_PER_SOMA + vertex / 4;
    uint subindex = vertex % 4;
    uint packed = packedConnection[index];
    return (packed >> (subindex * 8u)) & 15u;
}

bool fetchInside(uint vertex) {
    uint index = td.somaIndex * STORAGE_PER_SOMA + vertex / 4;
    uint subindex = vertex % 4;
    uint packed = packedConnection[index];
    uint raw = packed >> (subindex * 8u);
    return ((raw >> 4) & 1u) == 1u;
}


void fetchPackedData(uint vertex, out uint connection, out bool inside) {
    uint index = td.somaIndex * STORAGE_PER_SOMA + vertex / 4;
    uint subindex = vertex % 4;
    uint packed = packedConnection[index];
    uint raw = packed >> (subindex * 8u);
    connection = raw & 15u;
    inside = ((raw >> 4) & 1u) == 1u;
}

void swapVertices(uint i, uint j) {
    float tempAngle = connectionVerticesAngles[i];
    uint tempIndex = connectionVerticesIndices[i];
    vec3 tempVertex = connectionVertices[i];

    connectionVerticesAngles[i] = connectionVerticesAngles[j];
    connectionVerticesIndices[i] = connectionVerticesIndices[j];
    connectionVertices[i] = connectionVertices[j];


    connectionVerticesAngles[j] = tempAngle;
    connectionVerticesIndices[j] = tempIndex;
    connectionVertices[j] = tempVertex;
}

void sortVertices(uint verticesAmount) {
    uint i = gl_LocalInvocationID.x;
    if (i < verticesAmount) {
        float angle = connectionVerticesAngles[i];
        uint index = connectionVerticesIndices[i];
        vec3 vertex = connectionVertices[i];

        uint sortedPosition = 0;
        for (uint n = 0; n < verticesAmount; ++n) {
            if (n == i) continue;
            float comparing = connectionVerticesAngles[n];
            if (angle > comparing || (angle == comparing && i > n)) {
                ++sortedPosition;
            }
        }

        connectionVerticesAngles[sortedPosition] = angle;
        connectionVerticesIndices[sortedPosition] = index;
        connectionVertices[sortedPosition] = vertex;
    }

    barrier();
}

vec3 generateWeightedPosition(uint index, vec3 position, Soma soma, vec3 center, float radius) {
    uint connectionIndex;
    bool inside;
    fetchPackedData(index, connectionIndex, inside);
    if (inside) return center;
    if (connectionIndex < MAX_SOMA_CONNECTIONS) {
        Section segment = sections[soma.connection[connectionIndex]];
        return projectToCapsule(center, segment.endAndRadius.xyz, segment.endAndRadius.w * radiusStrength, position);
    };


    vec3 d = normalize(position - center);

    float maxDistance = length(position - center);

    uint selected = 0;
    float totalWeight = somaSphereWeight;
    vec3 accumulation = position * totalWeight;
    for (uint i = 0; i < soma.amount; ++i) {
        Section segment = sections[soma.connection[i]];
        vec3 n = normalize(segment.endAndRadius.xyz - center);
        vec3 start = center + n * radius;
        vec3 connectionCenter = mix(start, segment.endAndRadius.xyz, somaConnectionPushFactor);
        float minDistance = segment.endAndRadius.w;

        float cos = max(dot(n, normalize(position - center)), 0.0f);
        float sin = sqrt(1.0f - cos * cos);
        float weight = clamp(1.0f - sin, 0.0f, 1.0f);
        weight = pow(weight, somaWeightPower) * somaConnectionMaxWeight;

        totalWeight += weight;
        vec3 planeProjected = projectToPlane(n, connectionCenter, position);
        accumulation += projectToSphere(connectionCenter, segment.endAndRadius.w * radiusStrength, planeProjected) * weight;
    }
    return accumulation / totalWeight;
}

void pushVertex(uint i, vec3 position, vec3 normal, uint type, Neuron neuron, uint sectionId, bool sel) {
    gl_MeshVerticesEXT[i].gl_Position = viewProjection * neuron.model * vec4(position, 1.0f);
    fragNormal[i] = mat3(neuron.normal) * normal;
    fragNeuronId[i] = uintBitsToFloat(neuron.neuronId);
    fragSectionId[i] = uintBitsToFloat(sectionId);
    fragSelected[i] = sel ? 1.0f : 0.0f;

    if (type == 0) {
        fragColor[i] = vec3(0, 1, 0);
    } else if (type == 1) {
        fragColor[i] = vec3(0, 0, 1);
    } else if (type == 2) {
        fragColor[i] = vec3(1, 1, 0);
    } else if (type == 3) {
        fragColor[i] = vec3(1, 1, 1);
    } else if (type == 4) {
        fragColor[i] = vec3(0.5f, 0.5f, 0.5f);
    } else if (type == 5) {
        fragColor[i] = vec3(1, 0.5f, 0.5f);
    } else if (type == 6) {
        fragColor[i] = vec3(0.5f, 1, 0.5f);
    } else if (type == 7) {
        fragColor[i] = vec3(0.5f, 0.5f, 1);
    } else {
        fragColor[i] = defaultColor.xyz;
    }
}


void generateConnectionVertices(uint offset, Section soma, Section connection, Neuron neuron, bool isSelected) {
    if (gl_LocalInvocationID.x >= verticesPerCircle) return;

    uint sectionChildren = (connection.metadata >> 8u) & 7u;
    bool hasEndJoint = sectionChildren >= minChildrenForJoint;
    float eClip = hasEndJoint ? endClip : 0.0f;

    float radius = connection.endAndRadius.w * radiusStrength;
    float angle = float(gl_LocalInvocationID.x) / float(verticesPerCircle) * 2.0f * M_PI;

    vec3 unormDirection = connection.endAndRadius.xyz - soma.endAndRadius.xyz;
    vec3 direction = normalize(unormDirection);

    // Correctly align the initial basis for the start circle
    vec3 tangent = direction;

    // Handle edge cases where the tangent might align with the default normal
    vec3 initialNormal = vec3(0, 0, -1);
    if (abs(dot(tangent, initialNormal)) > 0.99f) {
        initialNormal = vec3(0, 1, 0);// Use a different axis to avoid parallel vectors
    }

    vec3 normal = normalize(cross(tangent, initialNormal));
    vec3 binormal = cross(tangent, normal);

    // Compute the rotated position for each vertex
    vec3 rotated = cos(angle) * normal + sin(angle) * binormal;
    vec3 center = connection.endAndRadius.xyz - unormDirection * eClip;
    vec3 point = center + rotated * radius;

    pushVertex(offset + gl_LocalInvocationID.x, point, rotated, MAX_SOMA_CONNECTIONS, neuron, connection.sectionId, isSelected);
}

void generateSomaPart () {
    if (gl_LocalInvocationID.x >= somaLongitudes) return;
    Soma soma = somas[td.somaIndex];
    Section section = sections[soma.sectionIndex];
    Neuron neuron = neurons[section.neuronIndex];
    bool isSelected = selected[soma.sectionIndex];

    SetMeshOutputsEXT(somaLongitudes * 2, somaLongitudes * 2);

    float radius = section.endAndRadius.w * radiusStrength;
    vec3 center = section.endAndRadius.xyz;

    uint latitude = gl_WorkGroupID.x;
    float thetaTop = float(latitude) / float(somaLatitudes - 1) * M_PI;// Latitude angle (0 to π)
    float thetaBot = float(latitude + 1) / float(somaLatitudes - 1) * M_PI;// Latitude angle (0 to π)
    float cosThetaBot = cos(thetaBot);
    float sinThetaBot = sin(thetaBot);
    float cosThetaTop = cos(thetaTop);
    float sinThetaTop = sin(thetaTop);

    for (uint longitude = gl_LocalInvocationID.x; longitude < somaLongitudes; longitude += gl_WorkGroupSize.x) {
        // Workgroup ID and total number of threads

        float phi = float(longitude) / float(somaLongitudes) * 2.0 * M_PI;// Longitude angle (0 to 2π)

        float cosPhi = cos(phi);
        float sinPhi = sin(phi);

        vec3 top = vec3(sinThetaTop * cosPhi, cosThetaTop, sinThetaTop * sinPhi) * radius + center;
        vec3 bot = vec3(sinThetaBot * cosPhi, cosThetaBot, sinThetaBot * sinPhi) * radius + center;

        uint topIndex = latitude * somaLongitudes + longitude;
        uint botIndex = (latitude + 1) * somaLongitudes + longitude;
        uint topConnection;
        uint botConnection;
        bool topInside;
        bool botInside;
        fetchPackedData(topIndex, topConnection, topInside);
        fetchPackedData(botIndex, botConnection, botInside);

        top = generateWeightedPosition(topIndex, top, soma, center, radius);
        bot = generateWeightedPosition(botIndex, bot, soma, center, radius);

        vec3 normalTop = normalize(top - center);
        vec3 normalBot = normalize(bot - center);

        pushVertex(longitude, top, normalTop, (topInside ? 1 : 0), neuron, section.sectionId, isSelected);
        pushVertex(longitude + somaLongitudes, bot, normalBot, (botInside ? 1 : 0), neuron, section.sectionId, isSelected);

    }

    for (uint longitude = gl_LocalInvocationID.x; longitude < somaLongitudes; longitude += gl_WorkGroupSize.x) {
        uint a = longitude;
        uint b = (a + 1) % somaLongitudes;
        uint c = a + somaLongitudes;
        uint d = b + somaLongitudes;

        uint ia = fetchConnection(latitude * somaLongitudes + a);
        uint ib = fetchConnection(latitude * somaLongitudes + b);
        uint ic = fetchConnection(latitude * somaLongitudes + c);
        uint id = fetchConnection(latitude * somaLongitudes + d);

        if (ia != ib || ia != ic || ia == MAX_SOMA_CONNECTIONS) {
            gl_PrimitiveTriangleIndicesEXT[longitude * 2 + 0] = uvec3(a, b, c);
        } else {
            gl_PrimitiveTriangleIndicesEXT[longitude * 2 + 0] = uvec3(a, a, a);
        }
        if (id != ib || id != ic || id == MAX_SOMA_CONNECTIONS) {
            gl_PrimitiveTriangleIndicesEXT[longitude * 2 + 1] = uvec3(c, b, d);
        } else {
            gl_PrimitiveTriangleIndicesEXT[longitude * 2 + 1] = uvec3(d, d, d);
        }
    }
}

void generateConnection () {
    uint currentConnection = gl_WorkGroupID.x - somaLatitudes + 1;

    Soma soma = somas[td.somaIndex];
    Section somaSection = sections[soma.sectionIndex];
    Section connectionSection = sections[soma.connection[currentConnection]];
    Neuron neuron = neurons[somaSection.neuronIndex];
    bool isSelected = selected[soma.connection[currentConnection]];

    // Find the indices of all vertices that have been selected by this connection.

    uint verticesAmount = 0;
    for (uint vertexIndex = gl_LocalInvocationID.x; vertexIndex < somaLatitudes * somaLongitudes; vertexIndex += gl_WorkGroupSize.x) {
        uint connection;
        bool inside;
        fetchPackedData(vertexIndex, connection, inside);

        bool connected = connection == currentConnection && !inside;
        uvec4 vote = subgroupBallot(connected);
        uint arrayId = verticesAmount + subgroupBallotExclusiveBitCount(vote);
        if (connected) {
            connectionVerticesIndices[arrayId] = vertexIndex;
        }

        verticesAmount += subgroupBallotBitCount(vote);
    }

    if (verticesAmount < 1) {
        SetMeshOutputsEXT(0, 0);
        return;
    }

    barrier();

    float radius = somaSection.endAndRadius.w * radiusStrength;
    vec3 somaCenter = somaSection.endAndRadius.xyz;
    vec3 direction = normalize(connectionSection.endAndRadius.xyz - somaCenter);
    vec3 center = somaCenter + direction * radius;

    vec3 initialNormal = vec3(0, 0, -1);
    if (abs(dot(direction, initialNormal)) > 0.99) {
        initialNormal = vec3(0, 1, 0);// Use a different axis to avoid parallel vectors
    }

    vec3 tangent = cross(direction, initialNormal);
    vec3 bitangent = cross(direction, tangent);

    // Generate the vertices.
    for (uint i = gl_LocalInvocationID.x; i < verticesAmount; i += gl_WorkGroupSize.x) {
        uint vertexIndex = connectionVerticesIndices[i];
        uint latitude = vertexIndex / somaLongitudes;
        uint longitude = vertexIndex % somaLongitudes;

        float phi = float(longitude) / float(somaLongitudes) * 2.0 * M_PI;// Longitude angle (0 to 2π)
        float theta = float(latitude) / float(somaLatitudes - 1) * M_PI;// Latitude angle (0 to π)

        float cosPhi = cos(phi);
        float sinPhi = sin(phi);
        float cosTheta = cos(theta);
        float sinTheta = sin(theta);

        vec3 vertex = vec3(sinTheta * cosPhi, cosTheta, sinTheta * sinPhi) * radius + somaCenter;
        vec3 projected = projectToCapsule(somaCenter, connectionSection.endAndRadius.xyz, connectionSection.endAndRadius.w * radiusStrength, vertex);
        connectionVertices[i] = projected;

        vec3 localVertex = projected - center;
        float angle = atan(dot(localVertex, bitangent), dot(localVertex, tangent));
        if (angle < 0.0f) angle += 2.0f * M_PI;
        connectionVerticesAngles[i] = angle;
    }

    barrier();
    sortVertices(verticesAmount);// Sort already does a barrier.

    // Push soma vertices
    for (uint i = gl_LocalInvocationID.x; i < verticesAmount; i += gl_WorkGroupSize.x) {
        vec3 v = connectionVertices[i];
        vec3 normal = normalize(v - center);
        pushVertex(i, v, normal, MAX_SOMA_CONNECTIONS, neuron, connectionSection.sectionId, isSelected);
    }

    // Push connection vertices
    generateConnectionVertices(verticesAmount, somaSection, connectionSection, neuron, isSelected);

    // Generate the triangles!
    float somaPerConnection = min(float(verticesAmount) / float(verticesPerCircle), 1.0f);
    float connectionPerSoma = min(float(verticesPerCircle) / float(verticesAmount), 1.0f);

    for (uint i = gl_LocalInvocationID.x; i < max(verticesAmount, verticesPerCircle); i += gl_WorkGroupSize.x) {
        uint somaIndex = uint(somaPerConnection * i);
        uint somaIndex2 = uint(somaPerConnection * (i + 1)) % verticesAmount;

        uint connectionIndex = uint(connectionPerSoma * i);
        uint connectionIndex2 = uint(connectionPerSoma * (i + 1)) % verticesPerCircle;

        uint a = somaIndex;
        uint b = somaIndex2;
        uint c = connectionIndex + verticesAmount;
        uint d = connectionIndex2 + verticesAmount;
        gl_PrimitiveTriangleIndicesEXT[i * 2 + 0] = uvec3(a, b, c);
        gl_PrimitiveTriangleIndicesEXT[i * 2 + 1] = uvec3(c, b, d);
    }

    uint triangles = max(verticesAmount, verticesPerCircle) * 2;
    SetMeshOutputsEXT(verticesAmount + verticesPerCircle, triangles);
}

void main() {
    if (gl_WorkGroupID.x < somaLatitudes - 1) {
        generateSomaPart();
    } else {
        generateConnection();
    }
}