#version 460
#extension GL_EXT_mesh_shader: enable

const float M_PI = 3.1415926535897932384626433832795f;

const int SAVING_SPACE_PER_SECTION = 64;
const int SAVING_SPACE_PER_JOINT = 68;

const uint MAX_POINTS_PER_CIRCLE = 16;
const uint MAX_HALF_CIRCLE = MAX_POINTS_PER_CIRCLE / 2;
const uint GROUPS_SIZE = MAX_POINTS_PER_CIRCLE * 2;

layout (local_size_x = GROUPS_SIZE, local_size_y = 1, local_size_z = 1) in;
layout (triangles) out;
layout (max_vertices = MAX_POINTS_PER_CIRCLE * 3 + MAX_HALF_CIRCLE, max_primitives = MAX_POINTS_PER_CIRCLE * 4 + 4) out;

layout (set = 0, binding = 0) uniform Matrices {
    mat4 view;
    mat4 viewProjection;
    mat4 inverseProjection;
    vec4 planes[6];
    float near;
    float far;
};

layout (set = 0, binding = 1) uniform GlobalData {
    float currentTime;
    float radiusStrength;
    float somaRadiusStrength;
    float startClip;
    float endClip;
    float splitHeight;
    float splitArcStrength;
    uint rotationIndexOffset;
    uint childrenRotationIndexOffset;
    uint minChildrenForJoint;
    uint verticesPerCircle;
    uint somaLatitudes;
    uint somaLongitudes;
    float somaConnectionPushFactor;
    float somaWeightPower;
    float somaSphereWeight;
    float somaConnectionMaxWeight;
    uint lod;
    uint frame;
    uint savingNeuron;
    vec4 defaultColor;
    vec4 selectedColor;
};

struct Neuron {
    uint neuronId;
    uint lodMode;// 0-7 = forced, 8 = dynamic, 9 = static
    uint updateFrame;
    uint maxSegmentId;
    float radius;
    mat4 model;
    mat4 normal;
};

struct Section {
    uint neuronIndex;
    uint sectionId;
    uint metadata;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

struct Joint {
    uint parent;
    uint amount;
    uint rotationIndex;// Rotation index data will always be 0-15!
    uint connection[8];
};

layout(std430, set = 2, binding = 1) buffer Neurons {
    Neuron neurons[];
};

layout(std430, set = 2, binding = 2) buffer Data {
    Section sections[];
};

layout(std430, set = 2, binding = 3) buffer Joints {
    Joint joints[];
};

layout(std430, set = 2, binding = 5) buffer Selection {
    bool selected[];
};

layout(std430, set = 2, binding = 8) buffer SavingVertices {
    vec4 savingVertices[];
};

layout(std430, set = 2, binding = 9) buffer SavingIndices {
    uvec4 savingIndices[];
};

struct TaskData {
    uint joint[32];
};

taskPayloadSharedEXT TaskData td;

shared vec3 parentCircle[MAX_POINTS_PER_CIRCLE];

layout(location = 0) out vec3 fragNormal[];
layout(location = 1) flat out float fragType[];
layout(location = 2) flat out float fragNeuronId[];
layout(location = 3) flat out float fragSectionId[];
layout(location = 4) flat out float fragSelected[];

uint getVerticesPerCircle(Section segment) {
    uint metadata = segment.metadata;
    uint localLod = (metadata >> 14u) & 7u;
    return 4 + localLod * (MAX_POINTS_PER_CIRCLE - 4) / 7;
}

void pushVertex(uint i, vec4 position, vec3 normal, uint type, Neuron neuron, uint sectionId, bool sel) {
    vec4 globalPosition = neuron.model * position;
    gl_MeshVerticesEXT[i].gl_Position = viewProjection * globalPosition;
    fragNormal[i] = mat3(neuron.normal) * normal;
    fragType[i] = uintBitsToFloat(type);
    fragNeuronId[i] = uintBitsToFloat(neuron.neuronId);
    fragSectionId[i] = uintBitsToFloat(sectionId);
    fragSelected[i] = sel ? 1.0f : 0.0f;

    if (neuron.neuronId == savingNeuron) {
        uint offset = SAVING_SPACE_PER_SECTION * (neuron.maxSegmentId + 1) + SAVING_SPACE_PER_JOINT * sectionId;
        savingVertices[offset + i] = globalPosition;
    }
}

void pushTriangle(uint i, uvec3 triangle, Neuron neuron, uint sectionId) {
    gl_PrimitiveTriangleIndicesEXT[i] = triangle;
    if (neuron.neuronId == savingNeuron) {
        uint offset = SAVING_SPACE_PER_SECTION * (neuron.maxSegmentId + 1) + SAVING_SPACE_PER_JOINT * sectionId;
        savingIndices[offset + i] = uvec4(triangle + uvec3(offset), 1);
    }
}

vec3 rotate (vec3 v, vec3 n, float a) {
    return v * cos(a) + cross(n, v) * sin(a) + n * dot(n, v) * (1. - cos(a));
}

uint generateTriangles(uint indexOffset, uint vertexOffset, uint startVPC, uint endVPC,
uint workGroupSize, uint workGroupSizeOffset, Neuron neuron, uint sectionId) {
    float startPerEnd = min(float(startVPC) / float(endVPC), 1.0f);
    float endPerStart = min(float(endVPC) / float(startVPC), 1.0f);

    for (uint i = gl_LocalInvocationID.x - workGroupSizeOffset; i < max(startVPC, endVPC); i += workGroupSize) {
        uint parentIndex = uint(startPerEnd * i);
        uint parentIndex2 = uint(startPerEnd * (i + 1)) % startVPC;

        uint sectionIndex = uint(endPerStart * i);
        uint sectionIndex2 = uint(endPerStart * (i + 1)) % endVPC;

        uint a = parentIndex;
        uint b = parentIndex2;
        uint c = sectionIndex + startVPC;
        uint d = sectionIndex2 + startVPC;

        pushTriangle(i * 2 + 0 + indexOffset, uvec3(a, b, c) + uvec3(vertexOffset), neuron, sectionId);
        pushTriangle(i * 2 + 1 + indexOffset, uvec3(c, b, d) + uvec3(vertexOffset), neuron, sectionId);
    }

    return max(startVPC, endVPC) * 2;
}

void generateTube (
vec3 startCenter,
vec3 endCenter,
vec3 startDirection,
vec3 endDirection,
float startRadius,
float endRadius,
uint startVPC,
uint endVPC,
uint rotationIndex,
uint childrenRotationIndex,
Neuron neuron,
uint startSectionId,
uint endSectionId,
bool isSelected) {
    if (gl_LocalInvocationID.x < startVPC + endVPC) {
        bool first = gl_LocalInvocationID.x < startVPC;
        uint finalRotationIndex = first ? rotationIndex : childrenRotationIndex;

        float startAngle = float(gl_LocalInvocationID.x + finalRotationIndex) / float(startVPC) * 2.0f * M_PI;
        float endAngle = float(gl_LocalInvocationID.x - startVPC + finalRotationIndex) / float(endVPC) * 2.0f * M_PI;
        float angle = first ? startAngle : endAngle;

        // Correctly align the initial basis for the start circle
        vec3 tangent = first ? startDirection : endDirection;

        // Handle edge cases where the tangent might align with the default normal
        vec3 initialNormal = vec3(0, 0, -1);
        if (abs(dot(tangent, initialNormal)) > 0.99) {
            initialNormal = vec3(0, 1, 0);// Use a different axis to avoid parallel vectors
        }

        vec3 normal = normalize(cross(tangent, initialNormal));
        vec3 binormal = cross(tangent, normal);

        // Smoothly transition basis along the tube.
        // Here we want to generate the tube using the parent direction,
        // but avoiding the candy-wrap effect.
        if (!first) {
            vec3 projectedNormal = normal - dot(normal, tangent) * tangent;// Project onto the tangent plane
            normal = normalize(projectedNormal);
            binormal = cross(tangent, normal);
        }

        // Compute the rotated position for each vertex
        vec3 rotated = cos(angle) * normal + sin(angle) * binormal;

        vec3 center = first ? startCenter : endCenter;
        float radius = (first ? startRadius : endRadius) * radiusStrength;
        vec3 point = center + rotated * radius;
        pushVertex(gl_LocalInvocationID.x, vec4(point, 1), rotated, 0, neuron, startSectionId, isSelected);
    }

    uint triangles = generateTriangles(0, 0, startVPC, endVPC, gl_WorkGroupSize.x, 0, neuron, startSectionId);
    SetMeshOutputsEXT(startVPC + endVPC, triangles);
}


void joint1(Joint joint) {

    // Just joint the sections
    Section parent = sections[joint.parent];
    Section section = sections[joint.connection[0]];
    Section grandParent = sections[parent.parent];
    Neuron neuron = neurons[parent.neuronIndex];

    uint startVPC = getVerticesPerCircle(parent);
    uint endVPC = getVerticesPerCircle(section);

    uint rotationIndex = (joint.rotationIndex + rotationIndexOffset) * startVPC / 16;
    uint childrenRotationIndex = (joint.rotationIndex + rotationIndexOffset + childrenRotationIndexOffset) * endVPC / 16;

    vec3 startDirectionUnorm = parent.endAndRadius.xyz - grandParent.endAndRadius.xyz;
    vec3 startDirection = normalize(startDirectionUnorm);
    vec3 endDirectionUnorm = section.endAndRadius.xyz - parent.endAndRadius.xyz;
    vec3 endDirection = normalize(endDirectionUnorm);

    vec3 startCenter = parent.endAndRadius.xyz - startDirectionUnorm * endClip;
    vec3 endCenter = parent.endAndRadius.xyz + endDirectionUnorm * startClip;

    float startRadius = mix(grandParent.endAndRadius.w, parent.endAndRadius.w, 1.0f - endClip);
    float endRadius = mix(parent.endAndRadius.w, section.endAndRadius.w, startClip);

    vec3 parentStart = grandParent.endAndRadius.xyz;

    bool isSelected = selected[joint.parent] || selected[joint.connection[0]];

    generateTube(
    startCenter,
    endCenter,
    startDirection,
    endDirection,
    startRadius,
    endRadius,
    startVPC,
    endVPC,
    rotationIndex,
    childrenRotationIndex,
    neuron,
    parent.sectionId,
    section.sectionId,
    isSelected
    );
}

vec3 generateCircle (uint start, uint rotationIndex, vec3 center, vec3 direction,
vec3 parentDirection, float radius, Neuron neuron, uint sectionId, bool isSelected, uint vpc) {
    float angle = float(gl_LocalInvocationID.x + rotationIndex) / float(vpc) * 2.0f * M_PI;

    // Correctly align the initial basis for the start circle
    vec3 tangent = direction;

    // Handle edge cases where the tangent might align with the default normal
    vec3 initialNormal = vec3(0, 0, -1);
    if (abs(dot(tangent, initialNormal)) > 0.99) {
        initialNormal = vec3(0, 1, 0);// Use a different axis to avoid parallel vectors
    }

    vec3 normal = normalize(cross(tangent, initialNormal));
    vec3 binormal = cross(tangent, normal);

    // Smoothly transition basis along the tube.
    vec3 projectedNormal = normal - dot(normal, tangent) * tangent;// Project onto the tangent plane
    normal = normalize(projectedNormal);
    binormal = cross(tangent, normal);

    // Compute the rotated position for each vertex
    vec3 rotated = cos(angle) * normal + sin(angle) * binormal;
    vec3 point = center + rotated * radius * radiusStrength;
    pushVertex(start + gl_LocalInvocationID.x, vec4(point, 1), rotated, 0, neuron, sectionId, isSelected);

    return point;
}

uint toParentIndex2(uint index, uint childIndex, uint vpc) {
    if (childIndex == 0) {
        if (index < vpc / 2) return index;
        else return vpc * 3 + index - vpc / 2;
    } else {
        if (index < vpc / 2) return vpc * 3 + (vpc / 2 - index - 1);
        else return index;
    }
}

void joint2(Joint joint) {
    // We are going to generate the following vertices:
    // - Parent circle: 16 vertices.
    // - Children circles: 16 vertices each -> 32 vertices.
    // - Split: 8 vertices. (16 / 2)
    // Total: 56 vertices. (POINTS_PER_CIRCLE * 3 + HALF_CIRCLE (ceil))

    // We are gonna generate the following triangles:
    // - Children: 32 triangles each -> 64 faces.
    // - 2 extra faces to fill the gaps.
    // Total: 68 faces. (POINTS_PER_CIRCLE * 4 + 2)

    Section parent = sections[joint.parent];
    Section grandParent = sections[parent.parent];
    Neuron neuron = neurons[parent.neuronIndex];
    uint parentVPC = getVerticesPerCircle(parent);

    uint slipVerticesAmount = parentVPC / 2u + ((parentVPC & 1u) == 0u ? 0 : 1);
    SetMeshOutputsEXT(parentVPC * 3 + slipVerticesAmount, parentVPC * 4 + 2);
    // Generate the parent's circle first.

    uint rotationIndex = uint(ceil((joint.rotationIndex + rotationIndexOffset) * parentVPC / 16.0f));
    uint childrenRotationIndex = uint(ceil((joint.rotationIndex + rotationIndexOffset + childrenRotationIndexOffset) * parentVPC / 16.0f));

    float parentRadius = mix(grandParent.endAndRadius.w, parent.endAndRadius.w, 1.0f - endClip);

    vec3 startDirectionUnorm = parent.endAndRadius.xyz - grandParent.endAndRadius.xyz;
    vec3 startDirection = normalize(startDirectionUnorm);
    vec3 startCenter = parent.endAndRadius.xyz - startDirectionUnorm * endClip;

    bool isSelected = selected[joint.parent];

    for (int i = 0; i < joint.amount; ++i) {
        isSelected = isSelected || selected[joint.connection[i]];
    }

    if (gl_LocalInvocationID.x < parentVPC) {
        parentCircle[gl_LocalInvocationID.x] =
        generateCircle(0, rotationIndex, startCenter, startDirection, startDirection, parentRadius, neuron, parent.sectionId, isSelected, parentVPC);
    }

    uint childIndex = gl_LocalInvocationID.x / parentVPC;
    uint localIndex = gl_LocalInvocationID.x % parentVPC;
    Section children[2];
    vec3 childrenUnormDirections[2];
    vec3 childrenDirections[2];

    for(int i = 0; i < 2; ++i) {
        children[i] = sections[joint.connection[i]];
        childrenUnormDirections[i] = children[i].endAndRadius.xyz - parent.endAndRadius.xyz;
        childrenDirections[i] = normalize(childrenUnormDirections[i]);
    }

    if (gl_LocalInvocationID.x < parentVPC * 2) {
        // Generate the circles of all children.
        // (Yes, this will generate both circles).
        Section section = children[childIndex];
        vec3 endDirectionUnorm = childrenUnormDirections[childIndex];
        vec3 endDirection = childrenDirections[childIndex];
        vec3 endCenter = parent.endAndRadius.xyz + endDirectionUnorm * startClip;
        float endRadius = mix(parent.endAndRadius.w, section.endAndRadius.w, startClip);
        generateCircle(parentVPC, childrenRotationIndex, endCenter, endDirection, startDirection, endRadius,
        neuron, parent.sectionId, isSelected, parentVPC);
    }

    // Wait, we need the information of the first circle!
    barrier();

    // Generate the split.
    // We need the information of the following vertices:
    // - 0
    // - POINTS_PER_CIRCLE - 1
    // - POINTS_PER_CIRCLE / 2
    // - POINTS_PER_CIRCLE / 2 - 1
    // The split will contain half the amount of vertices inside a circle.
    // We start from half the circle and end on the start.

    // Let's generate the direction vector between the two children.
    vec3 halfDirection = normalize(startDirection + childrenDirections[0] + childrenDirections[1]);

    if (gl_LocalInvocationID.x < slipVerticesAmount) {
        vec3 start = (parentCircle[parentVPC / 2] + parentCircle[parentVPC / 2 - 1]) / 2;
        vec3 end = (parentCircle[0] + parentCircle[parentVPC - 1]) / 2;
        vec3 center = (start + end) / 2;

        // We calculate the percentage (0.0 - 1.0)
        float percentage = float(gl_LocalInvocationID.x) / float(slipVerticesAmount - 1);
        vec3 position = mix(start, end, percentage);

        vec3 strength = halfDirection * parent.endAndRadius.w * splitArcStrength;
        vec3 up = halfDirection * parent.endAndRadius.w * splitHeight;

        // Now we move the position to the center.
        position += (-4 * percentage * percentage + 4 * percentage) * strength + up;

        // We calculate the normal.
        vec3 normal = normalize(position - center);

        // Finally, we can push the vertex
        uint index = parentVPC * 3 + gl_LocalInvocationID.x;

        pushVertex(index, vec4(position, 1), normal, 0, neuron, parent.sectionId, isSelected);
    }

    if (gl_LocalInvocationID.x < parentVPC * 2) {
        // Generate the triangles.
        // The tricky part here is to fetch the corresponding vertex from the parent circle.
        // Each local thread will generate one two triangles.
        uint start = parentVPC + childIndex * parentVPC;
        uint child1 = localIndex + start;
        uint child2 = ((localIndex + 1) % parentVPC) + start;

        uint parent1 = toParentIndex2(localIndex, childIndex, parentVPC);
        uint parent2 = toParentIndex2((localIndex + 1) % parentVPC, childIndex, parentVPC);


        pushTriangle(gl_LocalInvocationID.x, uvec3(child1, parent1, child2), neuron, parent.sectionId);
        pushTriangle(gl_LocalInvocationID.x + parentVPC * 2, uvec3(parent1, parent2, child2), neuron, parent.sectionId);

        // Now we have to fill the gaps at the edge.
        if (gl_LocalInvocationID.x == 0) {
            uint gapStart = parentVPC * 3;
            uint start = parentVPC * 4;

            pushTriangle(start, uvec3(parentVPC / 2 - 1, parentVPC / 2, gapStart), neuron, parent.sectionId);
            pushTriangle(start + 1, uvec3(0, gapStart + parentVPC / 2 - 1, parentVPC - 1), neuron, parent.sectionId);
        }
    }
}

void main() {
    SetMeshOutputsEXT(0, 0);
    Joint joint = joints[td.joint[gl_WorkGroupID.x]];
    if (joint.amount == 1) {
        joint1(joint);
    } else if (joint.amount >= 2) {
        joint2(joint);
    }
}