#version 460
#extension GL_EXT_mesh_shader: enable

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 1) uniform GlobalData {
    float currentTime;
    float radiusStrength;
    float startClip;
    float endClip;
    float splitHeight;
    float splitArcStrength;
    uint rotationIndexOffset;
    uint childrenRotationIndexOffset;
    uint minChildrenForJoint;
    uint verticesPerCircle;
    uint somaLatitudes;
    uint somaLongitudes;
    float somaConnectionPushFactor;
    float somaWeightPower;
    float somaSphereWeight;
    float somaConnectionMaxWeight;
    vec4 defaultColor;
    vec4 selectedColor;
    uint lod;
    uint frame;
};

struct Section {
    uint neuronIndex;
    uint sectionId;
    uint metadata;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

struct Joint {
    uint parent;
    uint amount;
    uint rotationIndex;// Rotation index data will always be 0-15!
    uint connection[8];
};

layout(std430, set = 2, binding = 1) buffer Data {
    Section sections[];
};

layout(std430, set = 2, binding = 2) buffer Joints {
    Joint joints[];
};

struct TaskData {
    uint instance;
};

taskPayloadSharedEXT TaskData td;

uint calculateEmit() {
    Joint joint = joints[gl_WorkGroupID.x];

    Section parent = sections[joint.parent];
    uint parentLOD = (parent.metadata >> 11u) & 7u;
    if (parentLOD > lod) return 0;
    if (joint.amount >= minChildrenForJoint) return 1;
    return 0;
}

void main() {
    td.instance = gl_WorkGroupID.x;
    EmitMeshTasksEXT(calculateEmit(), 1, 1);
}
    