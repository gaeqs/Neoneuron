#version 460
#extension GL_EXT_mesh_shader: enable
#extension GL_KHR_shader_subgroup_ballot: enable

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform Matrices {
    mat4 view;
    mat4 viewProjection;
    mat4 inverseProjection;
    vec4 planes[6];
    float near;
    float far;
};

layout (set = 0, binding = 1) uniform GlobalData {
    float currentTime;
    float radiusStrength;
    float somaRadiusStrength;
    float startClip;
    float endClip;
    float splitHeight;
    float splitArcStrength;
    uint rotationIndexOffset;
    uint childrenRotationIndexOffset;
    uint minChildrenForJoint;
    uint verticesPerCircle;
    uint somaLatitudes;
    uint somaLongitudes;
    float somaConnectionPushFactor;
    float somaWeightPower;
    float somaSphereWeight;
    float somaConnectionMaxWeight;
    uint lod;
    uint frame;
    uint savingNeuron;
    vec4 defaultColor;
    vec4 selectedColor;
};

layout (set = 0, binding = 2) uniform Scene {
    vec3 sceneCenter;
    vec3 sceneRadius;
};

struct Section {
    uint neuronIndex;
    uint sectionId;
    uint metadata;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

struct Joint {
    uint parent;
    uint amount;
    uint rotationIndex;// Rotation index data will always be 0-15!
    uint connection[8];
};

struct Neuron {
    uint neuronId;
    uint lodMode;// 0-7 = forced, 8 = dynamic, 9 = static
    uint updateFrame;
    uint maxSegmentId;
    float radius;
    mat4 model;
    mat4 normal;
};

layout (set = 2, binding = 0) uniform Representation {
    uint sectionsAmount;
    uint jointsAmount;
};

layout(std430, set = 2, binding = 1) buffer Neurons {
    Neuron neurons[];
};

layout(std430, set = 2, binding = 2) buffer Data {
    Section sections[];
};

layout(std430, set = 2, binding = 3) buffer Joints {
    Joint joints[];
};

struct TaskData {
    uint joint[32];
};

taskPayloadSharedEXT TaskData td;

bool sphereInFrustum(Neuron neuron, vec3 center, float radius2) {
    vec3 globalCenter = (neuron.model * vec4(center, 1.0f)).xyz;
    for (uint i = 0; i < 6; ++i) {
        vec3 normal = planes[i].xyz;
        float distance = planes[i].w;
        float side = dot(globalCenter, normal) + distance;
        if (side < 0.0f && side * side > radius2) return false;
    }

    return true;
}

void generateSphere(Joint joint, out vec3 center, out float radius2) {
    Section parent = sections[joint.parent];
    center = parent.endAndRadius.xyz;

    vec3 positions[8];

    for (int i = 0; i < joint.amount; ++i) {
        Section section = sections[joint.connection[i]];
        vec3 endDirectionUnorm = section.endAndRadius.xyz - parent.endAndRadius.xyz;
        vec3 endCenter = parent.endAndRadius.xyz + endDirectionUnorm * startClip;
        positions[i] = endCenter;
        center += endCenter;
    }
    center /= joint.amount + 1;

    float parentRadius2 = parent.endAndRadius.w * parent.endAndRadius.w;
    float maxRadius2 = dot(parent.endAndRadius.xyz - center, parent.endAndRadius.xyz - center);

    for (int i = 0; i < joint.amount; ++i) {
        vec3 position = positions[i];
        float local = dot(position - center, position - center);
        if (maxRadius2 < local) {
            maxRadius2 = local;
        }
    }

    float maxRadius = sqrt(maxRadius2) + parent.endAndRadius.w;
    radius2 = maxRadius2 * maxRadius2;
}

void main() {
    Joint joint = joints[gl_GlobalInvocationID.x];
    Section parent = sections[joint.parent];
    Neuron neuron = neurons[parent.neuronIndex];
    bool valid = gl_GlobalInvocationID.x < jointsAmount;

    if (valid) {
        vec3 center;
        float radius2;
        generateSphere(joint, center, radius2);
        valid = sphereInFrustum(neuron, center, radius2);
    }

    uvec4 vote = subgroupBallot(valid);
    uint amount = subgroupBallotBitCount(vote);


    if (valid) {
        uint index = subgroupBallotExclusiveBitCount(vote);
        td.joint[index] = gl_GlobalInvocationID.x;
    }

    EmitMeshTasksEXT(amount, 1, 1);
}
    