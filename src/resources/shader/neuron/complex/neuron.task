#version 460
#extension GL_EXT_mesh_shader: enable
#extension GL_KHR_shader_subgroup_ballot: enable

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform Matrices {
    mat4 view;
    mat4 viewProjection;
    mat4 inverseProjection;
    vec4 planes[6];
    float near;
    float far;
};

layout (set = 0, binding = 1) uniform GlobalData {
    float currentTime;
    float radiusStrength;
    float startClip;
    float endClip;
    float splitHeight;
    float splitArcStrength;
    uint rotationIndexOffset;
    uint childrenRotationIndexOffset;
    uint minChildrenForJoint;
    uint verticesPerCircle;
    uint somaLatitudes;
    uint somaLongitudes;
    float somaConnectionPushFactor;
    float somaWeightPower;
    float somaSphereWeight;
    float somaConnectionMaxWeight;
    vec4 defaultColor;
    vec4 selectedColor;
    uint lod;
    uint frame;
};

layout (set = 0, binding = 2) uniform Scene {
    vec3 sceneCenter;
    vec3 sceneRadius;
};

struct TaskData {
    uint section[32];
    uint lodNextToParent[32];
    uint children[32];
    uint amount;
    uint childrenAmount;
};

struct Neuron {
    uint neuronId;
    uint lodMode;// 0-7 = forced, 8 = dynamic, 9 = static
    uint updateFrame;
    mat4 model;
    mat4 normal;
};

struct Section {
    uint neuronIndex;
    uint sectionId;
    uint metadata;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

layout(std430, set = 2, binding = 0) buffer Neurons {
    Neuron neurons[];
};

layout(std430, set = 2, binding = 1) buffer Data {
    Section sections[];
};

layout(std430, set = 2, binding = 6) buffer SectionGPUData {
    uint lodParent[];
};

taskPayloadSharedEXT TaskData td;

bool sphereInFrustum(Neuron neuron, vec3 center, float radius) {
    vec3 globalCenter = (neuron.model * vec4(center, 1.0f)).xyz;
    for (uint i = 0; i < 6; ++i) {
        vec3 normal = planes[i].xyz;
        float distance = planes[i].w;
        float side = dot(globalCenter, normal) + distance;
        if (side < -radius) return false;
    }

    return true;
}

bool shouldUpdate(Neuron neuron) {
    if (neuron.lodMode == 8) {
        // Dynamic mode
        return (neuron.neuronId & 63u) == (frame & 63u) || neuron.updateFrame == frame;
    } else {
        // Static or LOD mode.
        return neuron.updateFrame == frame;
    }
}

uint computeLOD(Neuron neuron, Section segment) {
    if (neuron.lodMode == 8) {
        float sceneRadius = max(sceneRadius.x, max(sceneRadius.y, sceneRadius.z));
        vec3 viewPosition = vec3(view * neuron.model * vec4(segment.endAndRadius.xyz, 1.0f));
        float distance = length(viewPosition);
        return 7 - min(uint(distance * 7.0f / sceneRadius), 7);
    } else {
        return neuron.lodMode < 8 ? neuron.lodMode : lod;
    }
}


uint findNextToParent(Neuron neuron, uint firstParent) {
    Section segment = sections[firstParent];
    uint previous = firstParent;
    uint current = firstParent;
    bool notFound = false;
    do {
        previous = current;
        current = segment.parent;

        segment = sections[current];
        uint requiredLod = (segment.metadata >> 11u) & 7u;
        uint segmentLod = computeLOD(neuron, segment);
        notFound = requiredLod > segmentLod && previous != current;
    } while (notFound);
    return previous;
}

bool cullSection(Neuron neuron, Section section, Section parent) {
    vec3 end = section.endAndRadius.xyz;
    vec3 start = parent.endAndRadius.xyz;

    float length = length(section.endAndRadius.xyz - parent.endAndRadius.xyz);
    float radius = section.endAndRadius.w;
    vec3 center = (section.endAndRadius.xyz + parent.endAndRadius.xyz) * 0.5f;

    if (!sphereInFrustum(neuron, center, length + radius)) {
        return false;
    }

    // Split into four
    float subLength = length * 0.25f;

    for (uint i = 0; i < 4; ++i) {
        vec3 subCenter = start + (end - start) * (float(i) * 0.25f + 0.125f);
        if (sphereInFrustum(neuron, subCenter, subLength + radius)) {
            return true;
        }
    }

    return false;
}

void main() {
    Section segment = sections[gl_GlobalInvocationID.x];
    Neuron neuron = neurons[segment.neuronIndex];

    bool update = shouldUpdate(neuron);
    uint localLod;
    uint nextToParentIndex;

    uint metadata = segment.metadata;
    uint sectionChildren = (metadata >> 8u) & 7u;
    uint segmentLod = (metadata >> 11u) & 7u;

    if(update) {
        nextToParentIndex = findNextToParent(neuron, gl_GlobalInvocationID.x);
        lodParent[gl_GlobalInvocationID.x] = nextToParentIndex;
        localLod = computeLOD(neuron, segment);

        // Update LOD
        metadata = metadata & ~(7u << 14u);
        metadata = metadata + ((localLod & 7u) << 14u);
        sections[gl_GlobalInvocationID.x].metadata = metadata;
    } else {
        nextToParentIndex = lodParent[gl_GlobalInvocationID.x];
        localLod = (metadata >> 14u) & 7u;
    }


    Section nextToParent = sections[nextToParentIndex];
    Section parent = sections[nextToParent.parent];

    bool render = segmentLod <= localLod && cullSection(neuron, segment, parent);
    uvec4 vote = subgroupBallot(render);
    uint amount = subgroupBallotBitCount(vote);

    if (render) {
        uint index = subgroupBallotExclusiveBitCount(vote);
        td.section[index] = gl_GlobalInvocationID.x;
        td.lodNextToParent[index] = nextToParentIndex;
    }

    bool renderChildren = segmentLod <= localLod && sectionChildren == 0;
    uvec4 childrenVote = subgroupBallot(renderChildren);
    uint childrenAmount = subgroupBallotBitCount(childrenVote);

    if (renderChildren) {
        uint index = subgroupBallotExclusiveBitCount(childrenVote);
        td.children[index] = gl_GlobalInvocationID.x;
    }

    td.amount = amount;
    td.childrenAmount = childrenAmount;
    EmitMeshTasksEXT(amount + childrenAmount, 1, 1);
}
    