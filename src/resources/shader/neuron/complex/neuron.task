#version 460
#extension GL_EXT_mesh_shader: enable
#extension GL_KHR_shader_subgroup_ballot: enable

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 1) uniform GlobalData {
    float currentTime;
    float radiusStrength;
    float startClip;
    float endClip;
    float splitHeight;
    float splitArcStrength;
    uint rotationIndexOffset;
    uint childrenRotationIndexOffset;
    uint minChildrenForJoint;
    uint verticesPerCircle;
    uint somaLatitudes;
    uint somaLongitudes;
    float somaConnectionPushFactor;
    float somaWeightPower;
    float somaSphereWeight;
    float somaConnectionMaxWeight;
    vec4 defaultColor;
    vec4 selectedColor;
    uint lod;
};

struct TaskData {
    uint section[32];
    uint lodNextToParent[32];
    uint children[32];
    uint amount;
    uint childrenAmount;
};

struct Section {
    uint neuronIndex;
    uint sectionId;
    uint metadata;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

layout(std430, set = 2, binding = 1) buffer Data {
    Section sections[];
};


taskPayloadSharedEXT TaskData td;

uint findNextToParent(uint firstParent) {

    Section segment = sections[firstParent];
    uint previous = firstParent;
    uint current = firstParent;
    uint segmentLod;
    bool notFound = false;
    do {
        previous = current;
        current = segment.parent;

        segment = sections[current];
        segmentLod = (segment.metadata >> 11u) & 7u;
        notFound = segmentLod > lod && previous != current;
    } while (notFound);

    return previous;
}


void main() {
    Section section = sections[gl_GlobalInvocationID.x];
    uint sectionChildren = (section.metadata >> 8u) & 7u;
    uint segmentLod = (section.metadata >> 11u) & 7u;

    bool render = segmentLod <= lod;
    uvec4 vote = subgroupBallot(render);
    uint amount = subgroupBallotBitCount(vote);

    if (render) {
        uint index = subgroupBallotExclusiveBitCount(vote);
        td.section[index] = gl_GlobalInvocationID.x;
        td.lodNextToParent[index] = findNextToParent(gl_GlobalInvocationID.x);
    }

    bool renderChildren = render && sectionChildren == 0;
    uvec4 childrenVote = subgroupBallot(renderChildren);
    uint childrenAmount = subgroupBallotBitCount(childrenVote);

    if (renderChildren) {
        uint index = subgroupBallotExclusiveBitCount(childrenVote);
        td.children[index] = gl_GlobalInvocationID.x;
    }

    td.amount = amount;
    td.childrenAmount = childrenAmount;
    EmitMeshTasksEXT(amount + childrenAmount, 1, 1);
}
    