#version 460
#extension GL_EXT_mesh_shader: enable

const float M_PI = 3.1415926535897932384626433832795f;

const uint MAX_SOMA_CONNECTIONS = 8;

const uint MAX_LAT_VERTICES = 64;
const uint MAX_LONG_VERTICES = 64;
const uint MAX_VERTICES = MAX_LAT_VERTICES * MAX_LONG_VERTICES;
const uint STORAGE_PER_SOMA = MAX_VERTICES;

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 1) uniform GlobalData {
    float currentTime;
    float radiusStrength;
    float startClip;
    float endClip;
    float splitHeight;
    float splitArcStrength;
    uint rotationIndexOffset;
    uint childrenRotationIndexOffset;
    uint minChildrenForJoint;
    uint verticesPerCircle;
    uint somaLatitudes;
    uint somaLongitudes;
    float somaConnectionPushFactor;
    float somaWeightPower;
    float somaSphereWeight;
    float somaConnectionMaxWeight;
    vec4 defaultColor;
    vec4 selectedColor;
};

struct TaskData {
    uint somaIndex;
};

struct Section {
    uint neuronId;
    uint sectionId;
    uint metadata;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

struct Soma {
    uint sectionIndex;
    uint amount;
    uint connection[MAX_SOMA_CONNECTIONS];
};

layout(std430, set = 2, binding = 0) buffer Data {
    Section sections[];
};

layout(std430, set = 2, binding = 2) buffer Somas {
    Soma somas[];
};

layout(std430, set = 2, binding = 4) buffer SomaGPUData {
    uint packedConnection[];
};

taskPayloadSharedEXT TaskData td;

shared uint connection[MAX_VERTICES];
shared bool inside[MAX_VERTICES];

float distanceBetweenSegmentsSquared(vec3 p1, vec3 q1, vec3 p2, vec3 q2) {
    vec3 d1 = q1 - p1;
    vec3 d2 = q2 - p2;
    vec3 r = p1 - p2;

    float a = dot(d1, d1);
    float e = dot(d2, d2);
    float f = dot(d2, r);

    float c = dot(d1, r);
    float b = dot(d1, d2);

    float denom = a * e - b * b;

    float t = abs(denom) < 1e-6f ? 0.0f : clamp((b * f - c * e) / denom, 0.0f, 1.0f);
    float u = clamp((b * t + f) / e, 0.0f, 1.0f);

    // Recompute t based on clamped u
    t = clamp((b * u - c) / a, 0.0f, 1.0f);

    vec3 pos1 = p1 + t * d1;
    vec3 pos2 = p2 + u * d2;

    // Closest point on segment1
    return dot(pos1 - pos2, pos1 - pos2);
}

vec3 closestPointInSegmentToPlane(vec3 from, vec3 to, vec3 n, float d) {
    vec3 ab = to - from;
    float na = dot(n, from);

    float nab = dot(n, ab);

    if (abs(nab) < 1e-6f) {
        // Compare distances of `from` and `to` to the plane
        float distFrom = abs(dot(n, from) - d);
        float distTo = abs(dot(n, to) - d);
        return (distFrom < distTo) ? from : to;
    }

    float t = clamp((d - na) / nab, 0.0f, 1.0f);
    return from + t * ab;
}

vec3 closestPointToSegment(vec3 from, vec3 to, vec3 p) {
    vec3 l = to - from;
    float t = clamp(dot(p - from, l) / dot(l, l), 0.0f, 1.0f);
    return from + t * l;
}

bool pointInTriangle(vec3 a, vec3 b, vec3 c, vec3 p) {
    vec3 v0 = b - a, v1 = c - a, v2 = p - a;
    float d00 = dot(v0, v0);
    float d01 = dot(v0, v1);
    float d11 = dot(v1, v1);
    float d20 = dot(v2, v0);
    float d21 = dot(v2, v1);

    float denom = d00 * d11 - d01 * d01;
    float v = (d11 * d20 - d01 * d21) / denom;
    float w = (d00 * d21 - d01 * d20) / denom;
    float u = 1.0f - v - w;

    return u >= -1e-6f && v >= -1e-6f && w >= -1e-6f;
}

bool pointInPlane(vec3 n, float d, vec3 p) {
    return abs(dot(n, p) - d) <= 1e-6f;
}

void planeFromTriangle(vec3 a, vec3 b, vec3 c, out vec3 normal, out float d) {
    normal = normalize(cross(b - a, c - a));
    d = dot(normal, a);
}

vec3 closestPointToPlane(vec3 n, float d, vec3 p) {
    float distance = dot(n, p) - d;
    return p - distance * n;
}

bool capsulePointIntersection(vec3 p1, vec3 p2, float radius, vec3 p) {
    vec3 center = closestPointToSegment(p1, p2, p);
    vec3 distance = center - p;
    return dot(distance, distance) <= radius * radius;
}

bool capsuleTriangleIntersection(vec3 p1, vec3 p2, float radius, vec3 a, vec3 b, vec3 c) {
    vec3 n;
    float d;
    planeFromTriangle(a, b, c, n, d);

    vec3 dir = normalize(p2 - p1);

    vec3 closest = closestPointInSegmentToPlane(p1, p2, n, d);
    if (pointInPlane(n, d, closest) && pointInTriangle(a, b, c, closest)) return true;

    float m1 = distanceBetweenSegmentsSquared(a, b, p1, p2);
    float m2 = distanceBetweenSegmentsSquared(b, c, p1, p2);
    float m3 = distanceBetweenSegmentsSquared(c, a, p1, p2);
    if (min(m1, min(m2, m3)) <= radius * radius) return true;

    if (capsulePointIntersection(p1, p2, radius, a)) return true;
    if (capsulePointIntersection(p1, p2, radius, b)) return true;
    if (capsulePointIntersection(p1, p2, radius, c)) return true;

    return false;
}

bool capsuleSphereIntersection(vec3 p1, vec3 p2, float capsuleRadius, vec3 center, float sphereRadius) {
    vec3 closest = closestPointToSegment(p1, p2, center);
    float maxDistanceSquared = (capsuleRadius + sphereRadius) * (capsuleRadius * sphereRadius);
    vec3 ab = closest - center;
    return dot(ab, ab) <= maxDistanceSquared;
}


bool checkSegmentCollisions(vec3 a, vec3 b, vec3 c, out uint intersectedSegment, out bool isFirstVertexInside) {
    // Calculate triangle and radius:
    vec3 center = (a + b + c) / 3.0f;
    float triRadius = max(length(a - center), max(length(b - center), length(c - center)));

    Soma soma = somas[gl_WorkGroupID.x];
    Section somaSegment = sections[soma.sectionIndex];
    vec3 from = somaSegment.endAndRadius.xyz;
    intersectedSegment = MAX_SOMA_CONNECTIONS;
    isFirstVertexInside = false;
    for (uint i = 0; i < soma.amount; ++i) {
        Section segment = sections[soma.connection[i]];
        float radius = segment.endAndRadius.w * radiusStrength;
        vec3 to = segment.endAndRadius.xyz;//from + vec3(-10, 10, 0);// segment.endAndRadius.xyz * 2.0f - from;

        //if(capsuleSphereIntersection(from, to, radius, center, triRadius)) {
        if (capsuleTriangleIntersection(from, to, radius, a, b, c)) {
            intersectedSegment = i;
            isFirstVertexInside = capsulePointIntersection(from, to, radius, a);
            return true;
        }
    }
    return false;
}

uint packVertexData(uint index) {
    if (index >= somaLatitudes * somaLongitudes) return 0;
    uint con = connection[index];
    uint ins = inside[index] ? (1 << 4) : 0;
    return con + ins;
}

vec3 generateVertex(uint vertexIndex, vec3 center, float radius) {
    uint latitude = vertexIndex / somaLongitudes;
    uint longitude = vertexIndex % somaLongitudes;

    float phi = float(longitude) / float(somaLongitudes) * 2.0 * M_PI;// Longitude angle (0 to 2π)
    float theta = float(latitude) / float(somaLatitudes - 1) * M_PI;// Latitude angle (0 to π)

    float cosPhi = cos(phi);
    float sinPhi = sin(phi);
    float cosTheta = cos(theta);
    float sinTheta = sin(theta);
    return vec3(sinTheta * cosPhi, cosTheta, sinTheta * sinPhi) * radius + center;
}

void generateSomaGPUData() {
    Soma soma = somas[gl_WorkGroupID.x];
    Section section = sections[soma.sectionIndex];

    uint startIndex = gl_WorkGroupID.x * STORAGE_PER_SOMA;

    vec3 center = section.endAndRadius.xyz;
    float radius = section.endAndRadius.w * radiusStrength;

    // Fill connection buffer with MAX_SOMA_CONNECTIONS
    for (uint vertexIndex = gl_LocalInvocationID.x; vertexIndex < somaLatitudes * somaLongitudes; vertexIndex += gl_WorkGroupSize.x) {
        connection[vertexIndex] = MAX_SOMA_CONNECTIONS;
    }

    barrier();

    // Now, let's fetch the triangles and generate check for connections!
    for (uint vertexIndex = gl_LocalInvocationID.x; vertexIndex < somaLatitudes * somaLongitudes - somaLongitudes; vertexIndex += gl_WorkGroupSize.x) {
        uint latitude = vertexIndex / somaLongitudes;
        uint longitude = vertexIndex % somaLongitudes;


        uint a = vertexIndex;
        uint b = latitude * somaLongitudes + (longitude + 1) % somaLongitudes;
        uint c = a + somaLongitudes;
        uint d = b + somaLongitudes;

        vec3 va = generateVertex(a, center, radius);
        vec3 vb = generateVertex(b, center, radius);
        vec3 vc = generateVertex(c, center, radius);
        vec3 vd = generateVertex(d, center, radius);

        uint segment;
        bool isAInside;
        bool isCInside;
        if (checkSegmentCollisions(va, vb, vc, segment, isAInside)) {
            connection[a] = segment;
            connection[b] = segment;
            connection[c] = segment;
        }
        if (checkSegmentCollisions(vc, vb, vd, segment, isCInside)) {
            connection[c] = segment;
            connection[b] = segment;
            connection[d] = segment;
        }
        inside[a] = isAInside;
        if (vertexIndex + somaLongitudes >= somaLatitudes * somaLongitudes) {
            inside[c] = isCInside;// This is useful to add the information to the vertices of the final row!
        }
    }

    barrier();

    for (uint vertexIndex = gl_LocalInvocationID.x; vertexIndex < somaLatitudes * somaLongitudes - somaLongitudes; vertexIndex += gl_WorkGroupSize.x) {
        uint latitude = vertexIndex / somaLongitudes;
        uint longitude = vertexIndex % somaLongitudes;

        uint a = vertexIndex;
        uint b = latitude * somaLongitudes + (longitude + 1) % somaLongitudes;
        uint c = a + somaLongitudes;
        uint d = b + somaLongitudes;

        bool draw1 = connection[a] != connection[b] || connection[a] != connection[c] || connection[a] == MAX_SOMA_CONNECTIONS;
        bool draw2 = connection[d] != connection[b] || connection[d] != connection[c] || connection[d] == MAX_SOMA_CONNECTIONS;
        if(draw1) {
            inside[a] = false;
            inside[b] = false;
            inside[c] = false;
        }
        if(draw2) {
            inside[b] = false;
            inside[c] = false;
            inside[d] = false;
        }
    }

    barrier();

    // Finally, pack the data!
    uint elements = somaLatitudes * somaLongitudes / 4 + ((somaLatitudes * somaLongitudes) % 4 == 0 ? 0 : 1);
    for (uint i = gl_LocalInvocationID.x; i < elements; i += gl_WorkGroupSize.x) {
        uint start = i * 4;
        uint a = packVertexData(start);
        uint b = packVertexData(start + 1);
        uint c = packVertexData(start + 2);
        uint d = packVertexData(start + 3);
        packedConnection[startIndex + i] = a + (b << 8) + (c << 16) + (d << 24);
    }
}

void main() {
    Soma soma = somas[gl_WorkGroupID.x];
    generateSomaGPUData();
    if (gl_LocalInvocationID.x == 0) {
        td.somaIndex = gl_WorkGroupID.x;
        EmitMeshTasksEXT(somaLatitudes - 1 + soma.amount, 1, 1);
    }
}
    