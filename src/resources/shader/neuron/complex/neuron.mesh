#version 460
#extension GL_EXT_mesh_shader: enable

const float M_PI = 3.1415926535897932384626433832795f;

const int MAX_POINTS_PER_CIRCLE = 16;
const int GROUPS_SIZE = MAX_POINTS_PER_CIRCLE * 2;
const int SAVING_SPACE_PER_SECTION = GROUPS_SIZE * 2;

layout (local_size_x = GROUPS_SIZE, local_size_y = 1, local_size_z = 1) in;
layout (triangles) out;
layout (max_vertices = GROUPS_SIZE, max_primitives = GROUPS_SIZE) out;

layout (set = 1, binding = 0) uniform Matrices {
    mat4 view;
    mat4 viewProjection;
    mat4 inverseProjection;
    vec4 planes[6];
    float near;
    float far;
};

layout (set = 0, binding = 2) uniform Scene {
    vec3 sceneCenter;
    vec3 sceneRadius;
};

layout (set = 0, binding = 1) uniform GlobalData {
    float currentTime;
    float radiusStrength;
    float somaRadiusStrength;
    float startClip;
    float endClip;
    float splitHeight;
    float splitArcStrength;
    uint rotationIndexOffset;
    uint childrenRotationIndexOffset;
    uint minChildrenForJoint;
    uint verticesPerCircle;
    uint somaLatitudes;
    uint somaLongitudes;
    float somaConnectionPushFactor;
    float somaWeightPower;
    float somaSphereWeight;
    float somaConnectionMaxWeight;
    uint lod;
    uint frame;
    uint savingNeuron;
    vec4 defaultColor;
    vec4 selectedColor;
};

struct Neuron {
    uint datasetId;
    uint neuronId;
    uint lodMode;// 0-7 = forced, 8 = dynamic, 9 = static
    uint updateFrame;
    uint maxSegmentId;
    float radius;
    mat4 model;
    mat4 normal;
};

struct Section {
    uint neuronIndex;
    uint sectionId;
    uint metadata;
    uint parent;// This is the index inside the sections array! It is not the id of the section.
    vec4 endAndRadius;
};

layout(std430, set = 2, binding = 1) buffer Neurons {
    Neuron neurons[];
};

layout(std430, set = 2, binding = 2) buffer Data {
    Section sections[];
};

layout(std430, set = 2, binding = 5) buffer Selection {
    bool selected[];
};

layout(std430, set = 2, binding = 8) buffer SavingVertices {
    vec4 savingVertices[];
};

layout(std430, set = 2, binding = 9) buffer SavingIndices {
    uvec4 savingIndices[];
};

struct TaskData {
    uint section[32];
    uint lodNextToParent[32];
    uint children[32];
    uint amount;
    uint childrenAmount;
};

taskPayloadSharedEXT TaskData td;

layout(location = 0) out vec3 fragNormal[];
layout(location = 1) flat out float fragType[];
layout(location = 2) flat out float fragDatasetId[];
layout(location = 3) flat out float fragNeuronId[];
layout(location = 4) flat out float fragSectionId[];
layout(location = 5) flat out float fragSelected[];

uint computeLOD(Neuron neuron, Section segment) {
    if (neuron.lodMode == 8) {
        float sceneRadius = neuron.radius;
        vec3 viewPosition = vec3(view * neuron.model * vec4(segment.endAndRadius.xyz, 1.0f));
        float distance = length(viewPosition);
        return 7 - min(uint(distance * 7.0f / sceneRadius), 7);
    } else {
        return neuron.lodMode < 8 ? neuron.lodMode : lod;
    }
}

uint getVerticesPerCircle(Neuron neuron, Section segment) {
    uint localLod = computeLOD(neuron, segment);
    return 4 + localLod * (MAX_POINTS_PER_CIRCLE - 4) / 7;
}

void pushVertex(uint i, vec4 position, vec3 normal, uint type, Neuron neuron, uint sectionId, bool sel, bool end) {
    vec4 globalPosition = neuron.model * position;
    gl_MeshVerticesEXT[i].gl_Position = viewProjection * globalPosition;
    fragNormal[i] = mat3(neuron.normal) * normal;
    fragType[i] = uintBitsToFloat(type);
    fragDatasetId[i] = uintBitsToFloat(neuron.datasetId);
    fragNeuronId[i] = uintBitsToFloat(neuron.neuronId);
    fragSectionId[i] = uintBitsToFloat(sectionId);
    fragSelected[i] = sel ? 1.0f : 0.0f;

    if (neuron.neuronId == savingNeuron) {
        uint index = SAVING_SPACE_PER_SECTION * sectionId + i + (end ?  SAVING_SPACE_PER_SECTION / 2 : 0);
        savingVertices[index] = globalPosition;
    }
}

void pushTriangle(uint i, uvec3 triangle, Neuron neuron, uint sectionId, bool end) {
    gl_PrimitiveTriangleIndicesEXT[i] = triangle;
    if (neuron.neuronId == savingNeuron) {
        uint start = SAVING_SPACE_PER_SECTION * sectionId + (end ?  SAVING_SPACE_PER_SECTION / 2 : 0);
        uint index = start + i;
        savingIndices[index] = uvec4(triangle + uvec3(start), 1);
    }
}

vec3 rotate (vec3 v, vec3 n, float a) {
    return v * cos(a) + cross(n, v) * sin(a) + n * dot(n, v) * (1. - cos(a));
}

void generateSection(uint sectionIndex, uint nextToParentIndex) {

    Section section = sections[sectionIndex];
    Section directParent = sections[section.parent];
    Section directGrandparent = sections[directParent.parent];

    Section nextToParent = sections[nextToParentIndex];
    Section parent = sections[nextToParent.parent];
    Section grandParent = sections[parent.parent];
    Neuron neuron = neurons[section.neuronIndex];

    uint sectionVPC = getVerticesPerCircle(neuron, section);
    uint parentVPC = getVerticesPerCircle(neuron, parent);
    uint totalVertices = sectionVPC + parentVPC;

    uint parentType = parent.metadata & 255u;
    uint sectionType = section.metadata & 255u;
    bool parentSoma = parentType == 1;

    // If is soma or has no children...
    if (sectionType == 1 || parentSoma || section.sectionId == parent.sectionId) {
        SetMeshOutputsEXT(0, 0);
        return;
    }

    if (gl_LocalInvocationID.x < totalVertices) {
        // Fetch initial data.
        bool first = gl_LocalInvocationID.x < parentVPC;
        bool isSelected = selected[sectionIndex];
        uint parentChildren = (parent.metadata >> 8u) & 7u;
        uint sectionChildren = (section.metadata >> 8u) & 7u;
        bool hasStartJoint = parentChildren >= minChildrenForJoint;
        bool hasEndJoint = sectionChildren >= minChildrenForJoint;

        float sClip = hasStartJoint ? startClip : 0.0f;
        float eClip = hasEndJoint ? endClip : 0.0f;

        vec3 end = section.endAndRadius.xyz;
        vec3 directStart = directParent.endAndRadius.xyz;
        vec3 start = parent.endAndRadius.xyz;
        vec3 parentStart = grandParent.endAndRadius.xyz;

        float startRadius = mix(parent.endAndRadius.w, nextToParent.endAndRadius.w, parentSoma ? 1.0f : sClip);
        float endRadius = mix(directParent.endAndRadius.w, section.endAndRadius.w, 1.0f - eClip);
        float radius = (first ? startRadius : endRadius) * radiusStrength;

        float angle = float(gl_LocalInvocationID.x - (first ? 0 : parentVPC)) / float(first ? parentVPC : sectionVPC) * 2.0f * M_PI;

        vec3 unormDirection = end - directStart;
        vec3 parentUnormDirection = nextToParent.endAndRadius.xyz - start;

        vec3 direction = normalize(unormDirection);
        vec3 parentDirection = (parent.sectionId == grandParent.sectionId || parentSoma)
        ? direction : normalize(hasStartJoint ? parentUnormDirection : start - parentStart);

        // Correctly align the initial basis for the start circle
        vec3 tangent = first ? parentDirection : direction;

        // Handle edge cases where the tangent might align with the default normal
        vec3 initialNormal = vec3(0, 0, -1);
        if (abs(dot(tangent, initialNormal)) > 0.99) {
            initialNormal = vec3(0, 1, 0);// Use a different axis to avoid parallel vectors
        }

        vec3 normal = normalize(cross(tangent, initialNormal));
        vec3 binormal = cross(tangent, normal);

        // Smoothly transition basis along the tube.
        // Here we want to generate the tube using the parent direction,
        // but avoiding the candy-wrap effect.
        if (!first) {
            vec3 projectedNormal = normal - dot(normal, tangent) * tangent;// Project onto the tangent plane
            normal = normalize(projectedNormal);
            binormal = cross(tangent, normal);
        }

        // Compute the rotated position for each vertex
        vec3 rotated = cos(angle) * normal + sin(angle) * binormal;

        vec3 center = first ? (start + parentUnormDirection * sClip) : end - unormDirection * eClip;

        vec3 point = center + rotated * radius;
        pushVertex(gl_LocalInvocationID.x, vec4(point, 1), rotated, 0, neuron, section.sectionId, isSelected, false);
    }

    // Generate the triangles!
    float parentPerSection = min(float(parentVPC) / float(sectionVPC), 1.0f);
    float sectionPerParent = min(float(sectionVPC) / float(parentVPC), 1.0f);

    for (uint i = gl_LocalInvocationID.x; i < max(parentVPC, sectionVPC); i += gl_WorkGroupSize.x) {
        uint parentIndex = uint(parentPerSection * i);
        uint parentIndex2 = uint(parentPerSection * (i + 1)) % parentVPC;

        uint sectionIndex = uint(sectionPerParent * i);
        uint sectionIndex2 = uint(sectionPerParent * (i + 1)) % sectionVPC;

        uint a = parentIndex;
        uint b = parentIndex2;
        uint c = sectionIndex + parentVPC;
        uint d = sectionIndex2 + parentVPC;

        pushTriangle(i * 2 + 0, uvec3(a, b, c), neuron, section.sectionId, false);
        pushTriangle(i * 2 + 1, uvec3(c, b, d), neuron, section.sectionId, false);
    }

    uint triangles = max(parentVPC, sectionVPC) * 2;
    SetMeshOutputsEXT(totalVertices, triangles);
}

void generateEnd (uint sectionIndex) {
    Section section = sections[sectionIndex];
    Neuron neuron = neurons[section.neuronIndex];
    uint sectionVPC = getVerticesPerCircle(neuron, section);
    if (gl_LocalInvocationID.x >= sectionVPC) return;

    Section parent = sections[section.parent];
    uint parentType = parent.metadata & 255u;
    uint sectionType = section.metadata & 255u;
    // If is soma or has no children...
    if (sectionType == 1 || section.sectionId == parent.sectionId) {
        SetMeshOutputsEXT(0, 0);
        return;
    }

    // Fetch initial data.
    bool first = gl_LocalInvocationID.x < sectionVPC;
    bool isSelected = selected[sectionIndex];
    uint parentChildren = (parent.metadata >> 8u) & 7u;
    uint sectionChildren = (section.metadata >> 8u) & 7u;
    bool hasStartJoint = parentChildren >= minChildrenForJoint;
    bool hasEndJoint = sectionChildren >= minChildrenForJoint;

    float eClip = hasEndJoint ? endClip : 0.0f;

    vec3 end = section.endAndRadius.xyz;
    vec3 start = parent.endAndRadius.xyz;

    float radius = section.endAndRadius.w * radiusStrength;

    float angle = float(gl_LocalInvocationID.x) / float(sectionVPC) * 2.0f * M_PI;

    vec3 tangent = normalize(end - start);

    // Handle edge cases where the tangent might align with the default normal
    vec3 initialNormal = vec3(0, 0, -1);
    if (abs(dot(tangent, initialNormal)) > 0.99) {
        initialNormal = vec3(0, 1, 0);// Use a different axis to avoid parallel vectors
    }

    vec3 normal = normalize(cross(tangent, initialNormal));
    vec3 binormal = cross(tangent, normal);

    // Compute the rotated position for each vertex
    vec3 rotated = cos(angle) * normal + sin(angle) * binormal;
    vec3 point = end + rotated * radius;


    vec3 edge = end + tangent * radius;

    SetMeshOutputsEXT(sectionVPC + 1, sectionVPC);
    pushVertex(gl_LocalInvocationID.x, vec4(point, 1), rotated, 0, neuron, section.sectionId, isSelected, true);
    pushVertex(sectionVPC, vec4(edge, 1), tangent, 0, neuron, section.sectionId, isSelected, true);

    uint a = gl_LocalInvocationID.x;
    uint b = (gl_LocalInvocationID.x + 1) % sectionVPC;
    pushTriangle(gl_LocalInvocationID.x, uvec3(a, b, sectionVPC), neuron, section.sectionId, true);
}

void main() {
    if (gl_WorkGroupID.x >= td.amount) {
        uint section = td.children[gl_WorkGroupID.x - td.amount];
        generateEnd(section);
    } else {
        uint section = td.section[gl_WorkGroupID.x];
        uint nextToParent = td.lodNextToParent[gl_WorkGroupID.x];
        generateSection(section, nextToParent);
    }
}